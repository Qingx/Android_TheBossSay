package com.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import net.cd1369.tbs.android.data.entity.BossLabelEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BOSS_LABEL_ENTITY".
*/
public class BossLabelEntityDao extends AbstractDao<BossLabelEntity, String> {

    public static final String TABLENAME = "BOSS_LABEL_ENTITY";

    /**
     * Properties of entity BossLabelEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Name = new Property(1, String.class, "name", false, "name");
        public final static Property KeyValue = new Property(2, String.class, "keyValue", false, "keyValue");
        public final static Property CreateTime = new Property(3, Long.class, "createTime", false, "createTime");
        public final static Property ParentId = new Property(4, String.class, "parentId", false, "parentId");
        public final static Property Sort = new Property(5, int.class, "sort", false, "sort");
        public final static Property Type = new Property(6, int.class, "type", false, "type");
    }


    public BossLabelEntityDao(DaoConfig config) {
        super(config);
    }
    
    public BossLabelEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BOSS_LABEL_ENTITY\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"name\" TEXT," + // 1: name
                "\"keyValue\" TEXT," + // 2: keyValue
                "\"createTime\" INTEGER," + // 3: createTime
                "\"parentId\" TEXT," + // 4: parentId
                "\"sort\" INTEGER NOT NULL ," + // 5: sort
                "\"type\" INTEGER NOT NULL );"); // 6: type
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BOSS_LABEL_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BossLabelEntity entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String keyValue = entity.getKeyValue();
        if (keyValue != null) {
            stmt.bindString(3, keyValue);
        }
 
        Long createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(4, createTime);
        }
 
        String parentId = entity.getParentId();
        if (parentId != null) {
            stmt.bindString(5, parentId);
        }
        stmt.bindLong(6, entity.getSort());
        stmt.bindLong(7, entity.getType());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BossLabelEntity entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String keyValue = entity.getKeyValue();
        if (keyValue != null) {
            stmt.bindString(3, keyValue);
        }
 
        Long createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(4, createTime);
        }
 
        String parentId = entity.getParentId();
        if (parentId != null) {
            stmt.bindString(5, parentId);
        }
        stmt.bindLong(6, entity.getSort());
        stmt.bindLong(7, entity.getType());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public BossLabelEntity readEntity(Cursor cursor, int offset) {
        BossLabelEntity entity = new BossLabelEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // keyValue
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // createTime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // parentId
            cursor.getInt(offset + 5), // sort
            cursor.getInt(offset + 6) // type
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BossLabelEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setKeyValue(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCreateTime(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setParentId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSort(cursor.getInt(offset + 5));
        entity.setType(cursor.getInt(offset + 6));
     }
    
    @Override
    protected final String updateKeyAfterInsert(BossLabelEntity entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(BossLabelEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BossLabelEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
