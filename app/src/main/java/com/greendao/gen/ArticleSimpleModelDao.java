package com.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import java.util.List;
import net.cd1369.tbs.android.util.StringConvert;

import net.cd1369.tbs.android.data.model.ArticleSimpleModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ARTICLE_SIMPLE_MODEL".
*/
public class ArticleSimpleModelDao extends AbstractDao<ArticleSimpleModel, Long> {

    public static final String TABLENAME = "ARTICLE_SIMPLE_MODEL";

    /**
     * Properties of entity ArticleSimpleModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property DescContent = new Property(2, String.class, "descContent", false, "DESCONTENT");
        public final static Property IsCollect = new Property(3, boolean.class, "isCollect", false, "ISCOLLECT");
        public final static Property IsRead = new Property(4, boolean.class, "isRead", false, "ISREAD");
        public final static Property ReadCount = new Property(5, int.class, "readCount", false, "READCOUNT");
        public final static Property Collect = new Property(6, int.class, "collect", false, "COLLECT");
        public final static Property ReleaseTime = new Property(7, Long.class, "releaseTime", false, "RELEASETIME");
        public final static Property ArticleTime = new Property(8, Long.class, "articleTime", false, "ARTICLETIME");
        public final static Property Files = new Property(9, String.class, "files", false, "FILES");
        public final static Property BossId = new Property(10, String.class, "bossId", false, "BOSSID");
        public final static Property BossName = new Property(11, String.class, "bossName", false, "NAME");
        public final static Property BossHead = new Property(12, String.class, "bossHead", false, "BOSSHEAD");
        public final static Property BossRole = new Property(13, String.class, "bossRole", false, "BOSSROLE");
        public final static Property RecommendType = new Property(14, String.class, "recommendType", false, "RECOMMENDTYPE");
    }

    private final StringConvert filesConverter = new StringConvert();

    public ArticleSimpleModelDao(DaoConfig config) {
        super(config);
    }
    
    public ArticleSimpleModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ARTICLE_SIMPLE_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TITLE\" TEXT," + // 1: title
                "\"DESCONTENT\" TEXT," + // 2: descContent
                "\"ISCOLLECT\" INTEGER NOT NULL ," + // 3: isCollect
                "\"ISREAD\" INTEGER NOT NULL ," + // 4: isRead
                "\"READCOUNT\" INTEGER NOT NULL ," + // 5: readCount
                "\"COLLECT\" INTEGER NOT NULL ," + // 6: collect
                "\"RELEASETIME\" INTEGER," + // 7: releaseTime
                "\"ARTICLETIME\" INTEGER," + // 8: articleTime
                "\"FILES\" TEXT," + // 9: files
                "\"BOSSID\" TEXT," + // 10: bossId
                "\"NAME\" TEXT," + // 11: bossName
                "\"BOSSHEAD\" TEXT," + // 12: bossHead
                "\"BOSSROLE\" TEXT," + // 13: bossRole
                "\"RECOMMENDTYPE\" TEXT);"); // 14: recommendType
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ARTICLE_SIMPLE_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ArticleSimpleModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String descContent = entity.getDescContent();
        if (descContent != null) {
            stmt.bindString(3, descContent);
        }
        stmt.bindLong(4, entity.getIsCollect() ? 1L: 0L);
        stmt.bindLong(5, entity.getIsRead() ? 1L: 0L);
        stmt.bindLong(6, entity.getReadCount());
        stmt.bindLong(7, entity.getCollect());
 
        Long releaseTime = entity.getReleaseTime();
        if (releaseTime != null) {
            stmt.bindLong(8, releaseTime);
        }
 
        Long articleTime = entity.getArticleTime();
        if (articleTime != null) {
            stmt.bindLong(9, articleTime);
        }
 
        List files = entity.getFiles();
        if (files != null) {
            stmt.bindString(10, filesConverter.convertToDatabaseValue(files));
        }
 
        String bossId = entity.getBossId();
        if (bossId != null) {
            stmt.bindString(11, bossId);
        }
 
        String bossName = entity.getBossName();
        if (bossName != null) {
            stmt.bindString(12, bossName);
        }
 
        String bossHead = entity.getBossHead();
        if (bossHead != null) {
            stmt.bindString(13, bossHead);
        }
 
        String bossRole = entity.getBossRole();
        if (bossRole != null) {
            stmt.bindString(14, bossRole);
        }
 
        String recommendType = entity.getRecommendType();
        if (recommendType != null) {
            stmt.bindString(15, recommendType);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ArticleSimpleModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String descContent = entity.getDescContent();
        if (descContent != null) {
            stmt.bindString(3, descContent);
        }
        stmt.bindLong(4, entity.getIsCollect() ? 1L: 0L);
        stmt.bindLong(5, entity.getIsRead() ? 1L: 0L);
        stmt.bindLong(6, entity.getReadCount());
        stmt.bindLong(7, entity.getCollect());
 
        Long releaseTime = entity.getReleaseTime();
        if (releaseTime != null) {
            stmt.bindLong(8, releaseTime);
        }
 
        Long articleTime = entity.getArticleTime();
        if (articleTime != null) {
            stmt.bindLong(9, articleTime);
        }
 
        List files = entity.getFiles();
        if (files != null) {
            stmt.bindString(10, filesConverter.convertToDatabaseValue(files));
        }
 
        String bossId = entity.getBossId();
        if (bossId != null) {
            stmt.bindString(11, bossId);
        }
 
        String bossName = entity.getBossName();
        if (bossName != null) {
            stmt.bindString(12, bossName);
        }
 
        String bossHead = entity.getBossHead();
        if (bossHead != null) {
            stmt.bindString(13, bossHead);
        }
 
        String bossRole = entity.getBossRole();
        if (bossRole != null) {
            stmt.bindString(14, bossRole);
        }
 
        String recommendType = entity.getRecommendType();
        if (recommendType != null) {
            stmt.bindString(15, recommendType);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ArticleSimpleModel readEntity(Cursor cursor, int offset) {
        ArticleSimpleModel entity = new ArticleSimpleModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // descContent
            cursor.getShort(offset + 3) != 0, // isCollect
            cursor.getShort(offset + 4) != 0, // isRead
            cursor.getInt(offset + 5), // readCount
            cursor.getInt(offset + 6), // collect
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // releaseTime
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // articleTime
            cursor.isNull(offset + 9) ? null : filesConverter.convertToEntityProperty(cursor.getString(offset + 9)), // files
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // bossId
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // bossName
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // bossHead
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // bossRole
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14) // recommendType
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ArticleSimpleModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDescContent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIsCollect(cursor.getShort(offset + 3) != 0);
        entity.setIsRead(cursor.getShort(offset + 4) != 0);
        entity.setReadCount(cursor.getInt(offset + 5));
        entity.setCollect(cursor.getInt(offset + 6));
        entity.setReleaseTime(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setArticleTime(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setFiles(cursor.isNull(offset + 9) ? null : filesConverter.convertToEntityProperty(cursor.getString(offset + 9)));
        entity.setBossId(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setBossName(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setBossHead(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setBossRole(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setRecommendType(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ArticleSimpleModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ArticleSimpleModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ArticleSimpleModel entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
