package com.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import net.cd1369.tbs.android.data.entity.BossInfoEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BOSS_INFO_ENTITY".
*/
public class BossInfoEntityDao extends AbstractDao<BossInfoEntity, String> {

    public static final String TABLENAME = "BOSS_INFO_ENTITY";

    /**
     * Properties of entity BossInfoEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Name = new Property(1, String.class, "name", false, "name");
        public final static Property Head = new Property(2, String.class, "head", false, "head");
        public final static Property Role = new Property(3, String.class, "role", false, "role");
        public final static Property Info = new Property(4, String.class, "info", false, "info");
        public final static Property Date = new Property(5, long.class, "date", false, "date");
        public final static Property IsCollect = new Property(6, boolean.class, "isCollect", false, "isCollect");
        public final static Property IsPoint = new Property(7, boolean.class, "isPoint", false, "isPoint");
        public final static Property Deleted = new Property(8, boolean.class, "deleted", false, "deleted");
        public final static Property Guide = new Property(9, boolean.class, "guide", false, "guide");
        public final static Property Point = new Property(10, int.class, "point", false, "point");
        public final static Property Collect = new Property(11, int.class, "collect", false, "collect");
        public final static Property UpdateCount = new Property(12, int.class, "updateCount", false, "updateCount");
        public final static Property TotalCount = new Property(13, int.class, "totalCount", false, "totalCount");
        public final static Property ReadCount = new Property(14, int.class, "readCount", false, "readCount");
        public final static Property UpdateTime = new Property(15, Long.class, "updateTime", false, "updateTime");
        public final static Property CreateTime = new Property(16, Long.class, "createTime", false, "createTime");
    }


    public BossInfoEntityDao(DaoConfig config) {
        super(config);
    }
    
    public BossInfoEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BOSS_INFO_ENTITY\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"name\" TEXT," + // 1: name
                "\"head\" TEXT," + // 2: head
                "\"role\" TEXT," + // 3: role
                "\"info\" TEXT," + // 4: info
                "\"date\" INTEGER NOT NULL ," + // 5: date
                "\"isCollect\" INTEGER NOT NULL ," + // 6: isCollect
                "\"isPoint\" INTEGER NOT NULL ," + // 7: isPoint
                "\"deleted\" INTEGER NOT NULL ," + // 8: deleted
                "\"guide\" INTEGER NOT NULL ," + // 9: guide
                "\"point\" INTEGER NOT NULL ," + // 10: point
                "\"collect\" INTEGER NOT NULL ," + // 11: collect
                "\"updateCount\" INTEGER NOT NULL ," + // 12: updateCount
                "\"totalCount\" INTEGER NOT NULL ," + // 13: totalCount
                "\"readCount\" INTEGER NOT NULL ," + // 14: readCount
                "\"updateTime\" INTEGER," + // 15: updateTime
                "\"createTime\" INTEGER);"); // 16: createTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BOSS_INFO_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BossInfoEntity entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String head = entity.getHead();
        if (head != null) {
            stmt.bindString(3, head);
        }
 
        String role = entity.getRole();
        if (role != null) {
            stmt.bindString(4, role);
        }
 
        String info = entity.getInfo();
        if (info != null) {
            stmt.bindString(5, info);
        }
        stmt.bindLong(6, entity.getDate());
        stmt.bindLong(7, entity.getIsCollect() ? 1L: 0L);
        stmt.bindLong(8, entity.getIsPoint() ? 1L: 0L);
        stmt.bindLong(9, entity.getDeleted() ? 1L: 0L);
        stmt.bindLong(10, entity.getGuide() ? 1L: 0L);
        stmt.bindLong(11, entity.getPoint());
        stmt.bindLong(12, entity.getCollect());
        stmt.bindLong(13, entity.getUpdateCount());
        stmt.bindLong(14, entity.getTotalCount());
        stmt.bindLong(15, entity.getReadCount());
 
        Long updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindLong(16, updateTime);
        }
 
        Long createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(17, createTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BossInfoEntity entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String head = entity.getHead();
        if (head != null) {
            stmt.bindString(3, head);
        }
 
        String role = entity.getRole();
        if (role != null) {
            stmt.bindString(4, role);
        }
 
        String info = entity.getInfo();
        if (info != null) {
            stmt.bindString(5, info);
        }
        stmt.bindLong(6, entity.getDate());
        stmt.bindLong(7, entity.getIsCollect() ? 1L: 0L);
        stmt.bindLong(8, entity.getIsPoint() ? 1L: 0L);
        stmt.bindLong(9, entity.getDeleted() ? 1L: 0L);
        stmt.bindLong(10, entity.getGuide() ? 1L: 0L);
        stmt.bindLong(11, entity.getPoint());
        stmt.bindLong(12, entity.getCollect());
        stmt.bindLong(13, entity.getUpdateCount());
        stmt.bindLong(14, entity.getTotalCount());
        stmt.bindLong(15, entity.getReadCount());
 
        Long updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindLong(16, updateTime);
        }
 
        Long createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(17, createTime);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public BossInfoEntity readEntity(Cursor cursor, int offset) {
        BossInfoEntity entity = new BossInfoEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // head
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // role
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // info
            cursor.getLong(offset + 5), // date
            cursor.getShort(offset + 6) != 0, // isCollect
            cursor.getShort(offset + 7) != 0, // isPoint
            cursor.getShort(offset + 8) != 0, // deleted
            cursor.getShort(offset + 9) != 0, // guide
            cursor.getInt(offset + 10), // point
            cursor.getInt(offset + 11), // collect
            cursor.getInt(offset + 12), // updateCount
            cursor.getInt(offset + 13), // totalCount
            cursor.getInt(offset + 14), // readCount
            cursor.isNull(offset + 15) ? null : cursor.getLong(offset + 15), // updateTime
            cursor.isNull(offset + 16) ? null : cursor.getLong(offset + 16) // createTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BossInfoEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setHead(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRole(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setInfo(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDate(cursor.getLong(offset + 5));
        entity.setIsCollect(cursor.getShort(offset + 6) != 0);
        entity.setIsPoint(cursor.getShort(offset + 7) != 0);
        entity.setDeleted(cursor.getShort(offset + 8) != 0);
        entity.setGuide(cursor.getShort(offset + 9) != 0);
        entity.setPoint(cursor.getInt(offset + 10));
        entity.setCollect(cursor.getInt(offset + 11));
        entity.setUpdateCount(cursor.getInt(offset + 12));
        entity.setTotalCount(cursor.getInt(offset + 13));
        entity.setReadCount(cursor.getInt(offset + 14));
        entity.setUpdateTime(cursor.isNull(offset + 15) ? null : cursor.getLong(offset + 15));
        entity.setCreateTime(cursor.isNull(offset + 16) ? null : cursor.getLong(offset + 16));
     }
    
    @Override
    protected final String updateKeyAfterInsert(BossInfoEntity entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(BossInfoEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BossInfoEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
